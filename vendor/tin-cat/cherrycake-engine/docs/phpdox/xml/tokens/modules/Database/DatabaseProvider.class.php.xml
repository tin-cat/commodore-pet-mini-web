<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/lib/cherrycake/modules/Database" file="DatabaseProvider.class.php" realpath="/var/www/lib/cherrycake/modules/Database/DatabaseProvider.class.php" size="19145" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="f8a9329851d66588c1c024fd36311f5cc27b52d3" relative="modules/Database/DatabaseProvider.class.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * DatabaseProvider</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * @package Cherrycake</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="8"/>
  <line no="9">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="10"/>
  <line no="11">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_INTEGER</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="12">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_TINYINT</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="13">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_FLOAT</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="14">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_DATE</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">3</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="15">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_DATETIME</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">4</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="16">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_TIMESTAMP</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">5</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="17">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_TIME</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">6</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="18">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_YEAR</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">7</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="19">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_STRING</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">8</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="20">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_BLOB</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">9</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="21">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_BOOLEAN</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">10</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="22">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_IP</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">11</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="23">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_SERIALIZED</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">12</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="24">
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_COLOR</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">13</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="25"/>
  <line no="26">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * DatabaseProvider</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * Base class for database provider implementations. Intended to be overloaded by a higher level database system implementation class.</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * Database providers are only connected when required (when the first request is received)</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> * @package Cherrycake</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * @category Classes</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="35">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DatabaseProvider</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="36">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">	 * @var array $config Default configuration options</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="39">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
  </line>
  <line no="40">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheKeyPrefix"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"Database"</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="41">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheDefaultTtl"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">CACHE_TTL_NORMAL</token>
  </line>
  <line no="42">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">	 * @var array Configuration about fieldtypes (\Cherrycake\Modules\DATABASE_FIELD_TYPE_*) for each implementation of DatabaseProvider</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="47">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$fieldTypes</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="48"/>
  <line no="49">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">	 * @var bool $isConnected Whether this database is connected to the provider, when needed</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isConnected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="53"/>
  <line no="54">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">	 * @var string $resultClassName Holds the name of the class that handles database results. Must be set by an overloaded class</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="57">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$resultClassName</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="58"/>
  <line no="59">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">	 * createDatabaseResultObject</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">	 * Creates a database provider-dependant DatabaseResult type object and returns it.</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult The higher-level DatabaseResult object type</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">createDatabaseResultObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="67">
    <token name="T_WHITESPACE">		</token>
    <token name="T_EVAL">eval</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\$result = new \\Cherrycake\\"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">resultClassName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"();"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="69">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="70"/>
  <line no="71">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">	 * init</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">	 * Initializes the provider.</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">	 * @return bool True if initialization has been done ok, false otherwise</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">init</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">		</token>
    <token name="T_GLOBAL">global</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">loadCherrycakeModuleClass</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"Database"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">resultClassName</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="81"/>
  <line no="82">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="84"/>
  <line no="85">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">	 * config</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">	 * Sets the configuration of the database provider.</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">	 * @param array $config The database provider parameters</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">config</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">config</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">config</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_merge</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">config</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="95">
    <token name="T_WHITESPACE">		</token>
    <token name="T_ELSE">else</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">config</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$config</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="97">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="98"/>
  <line no="99">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">	 * getConfig</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">	 * Gets a configuration value</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">	 * @param string $key The configuration key</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">config</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="108">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="109"/>
  <line no="110">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">	 * connect</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">	 * Connects to the database provider. Intended to be overloaded by a higher level database system implementation class.</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">	 * @return bool True if the connection has been established, false otherwise</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="116">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">connect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="117">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="118"/>
  <line no="119">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">	 * requireConnection</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">	 * Calls the connect method in case this provider is not yet connected</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">	 * @return True if connection is stablished (or has already been stablished), false if connection error</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="126">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">requireConnection</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isConnected</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">Connect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="130">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="131"/>
  <line no="132">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">	 * disconnect</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">	 * Disconnect from the database provider if needed.</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">	 * @return bool True if the disconnection has been done, false otherwise</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="138">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">disconnect</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="139">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="140"/>
  <line no="141">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT">	 * query</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">	 * Performs a query to the database. Intended to be overloaded by a higher level implementation class.</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">	 * @param string $sql The SQL sentence to query to the database.</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options. See DatabaseResult::$setup for available options</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult object if the query has been executed correctly, false otherwise.</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="150">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">query</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="152"/>
  <line no="153">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="154">
    <token name="T_DOC_COMMENT">	 * queryCache</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT">	 * Performs a query to the database with Cache capabilities.</token>
  </line>
  <line no="157">
    <token name="T_DOC_COMMENT">	 * If the query results are stored in the cache, it retrieves it. If not in cache, it performs the query and stores the results in cache.</token>
  </line>
  <line no="158">
    <token name="T_DOC_COMMENT">	 * Stores results in cache in the form of a tridimensional arrays, storing the DatabaseResult-&gt;data variable.</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">	 *  Example:</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">	 * &lt;code&gt;</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">	 * $result = $e-&gt;Database-&gt;main-&gt;QueryCache(</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">	 * 	"select * from stuff order by rand() limit 3", // The query</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">	 * 	\Cherrycake\Modules\CACHE_TTL_MINIMAL, // The TTL</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">	 * 	[ // A key naming options array</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">	 * 		"cacheSpecificPrefix" =&gt; "TestQuery"</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">	 * 	],</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">	 * 	"fast" // A name of a cache provider that overrides the one configured in database.config.php</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">	 * );</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">	 * &lt;/code&gt;</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT">	 * @param string $sql The SQL sentence to query to the database.</token>
  </line>
  <line no="173">
    <token name="T_DOC_COMMENT">	 * @param string $cacheTtl The TTL for the cache results. If not specified, configuration value cacheDefaultTtl is used</token>
  </line>
  <line no="174">
    <token name="T_DOC_COMMENT">	 * @param array $cacheKeyNamingOptions If specified, takes the configuration keys as specified in \Cherrycake\Modules\Cache::buildCacheKey</token>
  </line>
  <line no="175">
    <token name="T_DOC_COMMENT">	 * @param string $overrideCacheProviderName The name of the alternative cache provider to use for this query. If specified, it will use this cache provider (as configured in cache.config.php) instead of the one configured in database.config.php</token>
  </line>
  <line no="176">
    <token name="T_DOC_COMMENT">	 * @param boolean $isStoreInCacheWhenNoResults Whether to store results in the cache when the query returned no rows or not</token>
  </line>
  <line no="177">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options, See DatabaseResult::$setup for available options</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult class if the query has been executed or retrieved from the cache correctly, false otherwise.</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="180">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">queryCache</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="181">
    <token name="T_WHITESPACE">		</token>
    <token name="T_GLOBAL">global</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="182"/>
  <line no="183">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="184">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheDefaultTtl"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="185"/>
  <line no="186">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">buildQueryCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="187">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheProviderName"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="188"/>
  <line no="189">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">Cache</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">get</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// If the data for this query is stored in the cache</token>
  </line>
  <line no="190">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">createDatabaseResultObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="191">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">init</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="192">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="193">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="194">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="195">
    <token name="T_WHITESPACE">		</token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// If the data for this query is not stored in the cache</token>
  </line>
  <line no="196">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">query</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// Run the query without caching</token>
  </line>
  <line no="197">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isAny</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="198">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">Cache</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">set</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="199">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="200">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="201">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="202">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="203"/>
  <line no="204">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT">	 * buildQueryCacheKey</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT">	 * Builds a cache key that uniquely identifies the query, based on the configuration provided via $cacheKeyNamingConfig</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT">	 * The cache key is always prefixed with the configuration value "cacheKeyPrefix", if set. (For clarity purposes when browsing the cached elements)</token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT">	 * It uses MD4 algorithm to create a unique string based on the query because is faster, and we do not require any security here.  MD4 algorithm generates a 32-char hexadecimal code, allowing for 16^32 different keys (approx. 3.4*10^38, 340 undecillion different values)</token>
  </line>
  <line no="210">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="211">
    <token name="T_DOC_COMMENT">	 * @param $sql The SQL sentence.</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT">	 * @param array $cacheKeyNamingOptions If specified, takes the configuration keys as specified in \Cherrycake\Modules\Cache::buildCacheKey</token>
  </line>
  <line no="213">
    <token name="T_DOC_COMMENT">	 * @return string The cache key</token>
  </line>
  <line no="214">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="215">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">buildQueryCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="216">
    <token name="T_WHITESPACE">		</token>
    <token name="T_GLOBAL">global</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="217">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"prefix"</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheKeyPrefix"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="218">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"hash"</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="219">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cache</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">buildCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="220">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="221"/>
  <line no="222">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="223">
    <token name="T_DOC_COMMENT">	 * prepare</token>
  </line>
  <line no="224">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="225">
    <token name="T_DOC_COMMENT">	 * Prepares a query to be done to the dabase using prepared queries methodology. Intended to be overloaded by a higher level implementation class</token>
  </line>
  <line no="226">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="227">
    <token name="T_DOC_COMMENT">	 * @param string $sql The SQL sentence to prepare to be queried to the database.</token>
  </line>
  <line no="228">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="229">
    <token name="T_DOC_COMMENT">	 * @return array A hash array with the following keys:</token>
  </line>
  <line no="230">
    <token name="T_DOC_COMMENT">	 *  - sql: The passed sql query</token>
  </line>
  <line no="231">
    <token name="T_DOC_COMMENT">	 *  - statement: A provider-specific statement object if the query has been executed correctly, false otherwise.</token>
  </line>
  <line no="232">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="233">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">prepare</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="234">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="235"/>
  <line no="236">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="237">
    <token name="T_DOC_COMMENT">	 * execute</token>
  </line>
  <line no="238">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="239">
    <token name="T_DOC_COMMENT">	 * Executes a previously prepared query with the given parameters. Intended to be overloaded by a higher level implementation class</token>
  </line>
  <line no="240">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="241">
    <token name="T_DOC_COMMENT">	 * @param array $prepareResult The prepared result as returned by the prepare method</token>
  </line>
  <line no="242">
    <token name="T_DOC_COMMENT">	 * @param array $parameters Hash array of the variables that must be applied to the prepared query in order to execute the final query, in the same order as are stated on the prepared sql. Each array element has the following keys:</token>
  </line>
  <line no="243">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="244">
    <token name="T_DOC_COMMENT">	 * * type: One of the prepared statement variable type consts, i.e.: DATABASE_FIELD_TYPE_*</token>
  </line>
  <line no="245">
    <token name="T_DOC_COMMENT">	 * * value: The value to be used for this variable on the prepared statement</token>
  </line>
  <line no="246">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="247">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options, See DatabaseResult::$setup for available options</token>
  </line>
  <line no="248">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="249">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult object if the query has been executed correctly, false otherwise.</token>
  </line>
  <line no="250">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="251">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">execute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="252">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="253"/>
  <line no="254">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="255">
    <token name="T_DOC_COMMENT">	 * prepareAndExecute</token>
  </line>
  <line no="256">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT">	 * Performs a full prepared query procedure in just one call. Does the same as if we're executing prepare and execute methods separaterly. Intended for performing prepared queries that won't be repeated in a loop (thus we don't need the benefits of separately preparing the query and then executing it multiple times with different values).</token>
  </line>
  <line no="258">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT">	 * @param string $sql The SQL sentence to prepare to be queried to the database.</token>
  </line>
  <line no="260">
    <token name="T_DOC_COMMENT">	 * @param array $parameters Hash array of the variables that must be applied to the prepared query in order to execute the final query, in the same order as are stated on the prepared sql. Same syntax as in the execute method.</token>
  </line>
  <line no="261">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options, See DatabaseResult::$setup for available options</token>
  </line>
  <line no="262">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="263">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult object if the query has been executed correctly, false otherwise.</token>
  </line>
  <line no="264">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="265">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">prepareAndExecute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="266">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">prepare</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="267">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="268"/>
  <line no="269">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$databaseResult</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">execute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="270">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="271"/>
  <line no="272">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$databaseResult</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="273">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="274"/>
  <line no="275">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="276">
    <token name="T_DOC_COMMENT">	 * executeCache</token>
  </line>
  <line no="277">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="278">
    <token name="T_DOC_COMMENT">	 * Executes a prepared query with Cache capabilities.</token>
  </line>
  <line no="279">
    <token name="T_DOC_COMMENT">	 * If the prepared query results are stored in the cache, it retrieves it. If not in cache, it normally executes the prepared query and stores the results in cache.</token>
  </line>
  <line no="280">
    <token name="T_DOC_COMMENT">	 * Stores results in cache in the form of a tridimensional arrays, storing the DatabaseResult-&gt;data variable.</token>
  </line>
  <line no="281">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="282">
    <token name="T_DOC_COMMENT">	 * @param array $prepareResult The prepared result as returned by the prepare method</token>
  </line>
  <line no="283">
    <token name="T_DOC_COMMENT">	 * @param array $parameters Hash array of the variables that must be applied to the prepared query in order to execute the final query, in the same order as are stated on the prepared sql. Same syntax as in execute method</token>
  </line>
  <line no="284">
    <token name="T_DOC_COMMENT">	 * @param string $cacheTtl The TTL for the cache results. If not specified, configuration value cacheDefaultTtl is used</token>
  </line>
  <line no="285">
    <token name="T_DOC_COMMENT">	 * @param array $cacheKeyNamingOptions If specified, takes the configuration keys as specified in \Cherrycake\Modules\Cache::buildCacheKey</token>
  </line>
  <line no="286">
    <token name="T_DOC_COMMENT">	 * @param string $overrideCacheProviderName The name of the alternative cache provider to use for this query. If specified, it will use this cache provider (as configured in cache.config.php) instead of the one configured in database.config.php</token>
  </line>
  <line no="287">
    <token name="T_DOC_COMMENT">	 * @param boolean $isStoreInCacheWhenNoResults Whether to store results in the cache when the query returned no rows or not</token>
  </line>
  <line no="288">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options, See DatabaseResult::init for available options</token>
  </line>
  <line no="289">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult class if the query has been executed or retrieved from the cache correctly, false otherwise.</token>
  </line>
  <line no="290">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="291">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">executeCache</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="292">
    <token name="T_WHITESPACE">		</token>
    <token name="T_GLOBAL">global</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="293"/>
  <line no="294">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="295">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheDefaultTtl"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="296"/>
  <line no="297">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">buildPreparedQueryCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"sql"</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="298">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getConfig</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"cacheProviderName"</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="299"/>
  <line no="300">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">Cache</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">get</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// If the data for this query is stored in the cache</token>
  </line>
  <line no="301">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">createDatabaseResultObject</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="302">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">init</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="303">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$data</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="304">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="305">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="306">
    <token name="T_WHITESPACE">		</token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// If the data for this query is not stored in the cache</token>
  </line>
  <line no="307">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">execute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_COMMENT">// Run the query without caching</token>
  </line>
  <line no="308">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">isAny</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="309">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">Cache</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_VARIABLE">$cacheProviderName</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">set</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKey</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getData</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="310">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="311">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$result</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="312">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="313">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="314"/>
  <line no="315">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="316">
    <token name="T_DOC_COMMENT">	 * prepareAndExecuteCache</token>
  </line>
  <line no="317">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="318">
    <token name="T_DOC_COMMENT">	 * Performs a full prepared query procedure in just one call with Cache capabilities. Does the same as if we're executing prepare and execute methods separaterly. Intended for performing prepared queries that won't be repeated in a loop (thus we don't need the benefits of separately preparing the query and then executing it multiple times with different values). Intended to be overloaded.</token>
  </line>
  <line no="319">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="320">
    <token name="T_DOC_COMMENT">	 * @param string $sql The SQL sentence to prepare to be queried to the database.</token>
  </line>
  <line no="321">
    <token name="T_DOC_COMMENT">	 * @param array $parameters Hash array of the variables that must be applied to the prepared query in order to execute the final query, in the same order as are stated on the prepared sql. Same syntax as in the execute method.</token>
  </line>
  <line no="322">
    <token name="T_DOC_COMMENT">	 * @param string $cacheTtl The TTL for the cache results. If not specified, configuration value cacheDefaultTtl is used</token>
  </line>
  <line no="323">
    <token name="T_DOC_COMMENT">	 * @param array $cacheKeyNamingOptions If specified, takes the configuration keys as specified in \Cherrycake\Modules\Cache::buildCacheKey</token>
  </line>
  <line no="324">
    <token name="T_DOC_COMMENT">	 * @param string $overrideCacheProviderName The name of the alternative cache provider to use for this query. If specified, it will use this cache provider (as configured in cache.config.php) instead of the one configured in database.config.php</token>
  </line>
  <line no="325">
    <token name="T_DOC_COMMENT">	 * @param boolean $isStoreInCacheWhenNoResults Whether to store results in the cache when the query returned no rows or not</token>
  </line>
  <line no="326">
    <token name="T_DOC_COMMENT">	 * @param array $setup Optional array with additional options, See DatabaseResult::init for available options</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">	 * @return DatabaseResult A provider-specific DatabaseResult object if the query has been executed correctly, false otherwise.</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="329">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">prepareAndExecuteCache</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="330">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">prepare</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="331">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="332"/>
  <line no="333">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$databaseResult</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">executeCache</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prepareResult</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheTtl</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$overrideCacheProviderName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$isStoreInCacheWhenNoResults</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$setup</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="334">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="335"/>
  <line no="336">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$databaseResult</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="338"/>
  <line no="339">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="340">
    <token name="T_DOC_COMMENT">	 * buildPreparedQueryCacheKey</token>
  </line>
  <line no="341">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="342">
    <token name="T_DOC_COMMENT">	 * Builds a cache key that uniquely identifies a prepared query with the given parameters, based on the configuration provided via $cacheKeyNamingConfig</token>
  </line>
  <line no="343">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="344">
    <token name="T_DOC_COMMENT">	 * @param $sql The SQL sentence.</token>
  </line>
  <line no="345">
    <token name="T_DOC_COMMENT">	 * @param array $parameters Hash array of the variables to be applied to the prepared query, with the same syntax as in the execute method</token>
  </line>
  <line no="346">
    <token name="T_DOC_COMMENT">	 * @param array $cacheKeyNamingOptions If specified, takes the configuration keys as specified in \Cherrycake\Modules\Cache::buildCacheKey</token>
  </line>
  <line no="347">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="348">
    <token name="T_DOC_COMMENT">	 * @return string The cache key</token>
  </line>
  <line no="349">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="350">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">buildPreparedQueryCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="351">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$hashString</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$sql</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="352"/>
  <line no="353">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="354">
    <token name="T_WHITESPACE">			</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$parameters</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="355">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$hashString</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parameter</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"value"</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="356"/>
  <line no="357">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"hash"</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$hashString</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="358">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cache</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">buildCacheKey</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$cacheKeyNamingOptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="359">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="360"/>
  <line no="361">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="362">
    <token name="T_DOC_COMMENT">	 * Inserts a row into the specified table on the current database, with the given fields.</token>
  </line>
  <line no="363">
    <token name="T_DOC_COMMENT">	 * @param string $table The table name</token>
  </line>
  <line no="364">
    <token name="T_DOC_COMMENT">	 * @param array $fields A hash array of field values</token>
  </line>
  <line no="365">
    <token name="T_DOC_COMMENT">	 * @return mixed If everything went ok, the id of the inserted row if the table had an autonumeric field, true if didn't have one. False otherwise.</token>
  </line>
  <line no="366">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="367">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">insert</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="368">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">prepareAndExecute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="369">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"insert into "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" ("</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">implode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">", "</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">") values ("</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">implode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">", "</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_fill</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">sizeof</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"?"</token>
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">");"</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="370">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$fields</token>
  </line>
  <line no="371">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="372">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="373"/>
  <line no="374">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="375">
    <token name="T_DOC_COMMENT">	 * Updates a single row in the database identified by the given $idFieldName and $idFieldValue with the given $fields data. More complex updates should be done by the app by calling other methods on this class like prepareAndExecute</token>
  </line>
  <line no="376">
    <token name="T_DOC_COMMENT">	 * @param string $tableName The table name</token>
  </line>
  <line no="377">
    <token name="T_DOC_COMMENT">	 * @param string $idFieldName The name of the field that uniquely identified the row to be updated</token>
  </line>
  <line no="378">
    <token name="T_DOC_COMMENT">	 * @param mixed $idFieldValue The field value for the row to be update</token>
  </line>
  <line no="379">
    <token name="T_DOC_COMMENT">	 * @param array $fields A hash array of field values</token>
  </line>
  <line no="380">
    <token name="T_DOC_COMMENT">	 * @return boolean True if everything went ok, false otherwise</token>
  </line>
  <line no="381">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="382">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">updateByUniqueField</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldValue</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="383">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$query</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"update "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" set "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">implode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" = ?, "</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" = ? where "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$idFieldName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" = ?;"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="384">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$fields</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$idFieldName</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
  </line>
  <line no="385">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"type"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_INTEGER</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="386">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"value"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldValue</token>
  </line>
  <line no="387">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="388">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">prepareAndExecute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="389">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$query</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="390">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$fields</token>
  </line>
  <line no="391">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="392">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="393">
    <token name="T_WHITESPACE">		</token>
    <token name="T_ELSE">else</token>
  </line>
  <line no="394">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="395">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="396"/>
  <line no="397">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="398">
    <token name="T_DOC_COMMENT">	 * Deletes a single row in the database identified by the given $idFieldName and $idFieldValue. More complex deletes should be done by the app by calling other methods on this class like prepareAndExecute</token>
  </line>
  <line no="399">
    <token name="T_DOC_COMMENT">	 * @param  [type] $tableName    [description]</token>
  </line>
  <line no="400">
    <token name="T_DOC_COMMENT">	 * @param  [type] $idFieldName  [description]</token>
  </line>
  <line no="401">
    <token name="T_DOC_COMMENT">	 * @param  [type] $idFieldValue [description]</token>
  </line>
  <line no="402">
    <token name="T_DOC_COMMENT">	 * @return [type]               [description]</token>
  </line>
  <line no="403">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="404">
    <token name="T_WHITESPACE">	</token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">deleteByUniqueField</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldValue</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="405">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$query</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"delete from "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tableName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" where "</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$idFieldName</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">" = ?;"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="406">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">prepareAndExecute</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="407">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$query</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="408">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
  </line>
  <line no="409">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
  </line>
  <line no="410">
    <token name="T_WHITESPACE">					</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"type"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Cherrycake</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">Modules</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">DATABASE_FIELD_TYPE_INTEGER</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="411">
    <token name="T_WHITESPACE">					</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"value"</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$idFieldValue</token>
  </line>
  <line no="412">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
  </line>
  <line no="413">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
  </line>
  <line no="414">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="415">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="416">
    <token name="T_WHITESPACE">		</token>
    <token name="T_ELSE">else</token>
  </line>
  <line no="417">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="418">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="419"/>
  <line no="420">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="421">
    <token name="T_DOC_COMMENT">	 * safeString</token>
  </line>
  <line no="422">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="423">
    <token name="T_DOC_COMMENT">	 * Treats the given string in order to let it be safely included in an SQL sentence as a string literal. Intended to be overloaded.</token>
  </line>
  <line no="424">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="425">
    <token name="T_DOC_COMMENT">	 * @param string $string The safe string</token>
  </line>
  <line no="426">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="427">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">safeString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$string</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="428">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="429">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
</source>
