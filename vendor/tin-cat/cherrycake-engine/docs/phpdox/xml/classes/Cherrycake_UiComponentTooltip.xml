<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\UiComponentTooltip" namespace="Cherrycake" name="UiComponentTooltip" abstract="false" final="false" start="38" end="185">
  <file path="/var/www/lib/cherrycake/modules/Ui" file="UiComponentTooltip.class.php" realpath="/var/www/lib/cherrycake/modules/Ui/UiComponentTooltip.class.php" size="6963" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="ca8c29f75511e89d70c885f06c3e9beb5efecc43" relative="modules/Ui/UiComponentTooltip.class.php"/>
  <docblock>
    <description compact="UiComponentTooltip">A Ui component to show tooltips

Configuration example for UiComponentjquery.config.php:
&lt;code&gt;
 $UiComponentAjaxConfig = [
     "defaultPosition" =&gt; "bottomLeft", // The default position of the tooltip if no other assigned: [bottomLeft | bottomRight | topLeft | topRight | leftCenter | rightCenter | topCenter | bottomCenter]. Defaults to "bottomLeft"
     "defaultIsOpenDelay" =&gt; false, // Default whether to wait defaultOpenDelay milliseconds before opening the tooltip.
     "defaultOpenDelay" =&gt; 300, // The default milliseconds the tooltip waits until it appears
     "defaultIsCloseDelay" =&gt; false, // Default whether to wait defaultCloseDelay milliseconds before closing the tooltip when it has to be closed
     "defaultCloseDelay" =&gt; 300, // The default milliseconds the tooltip waits until it closes
     "arrowSize" =&gt; 15, // The size of the arrow in pixels
     "arrowMargin" =&gt; 15, // The margin of the arrow against the borders of the tooltip in pixels
     "margin" =&gt; 3 // The margin to keep around the object triggering the tooltip
 ];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Classes"/>
  </docblock>
  <extends full="Cherrycake\UiComponent" namespace="Cherrycake" name="UiComponent"/>
  <member name="isConfigFile" type="boolean" default="true" visibility="protected" static="false" line="43">
    <docblock>
      <description/>
      <var description="$isConfig Sets whether this UiComponent has its own configuration file. Defaults to false." type="object">
        <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="config" type="array" default="" visibility="protected" static="false" line="48">
    <docblock>
      <description/>
      <var description="$config Holds the default configuration for this UiComponent" type="array"/>
    </docblock>
  </member>
  <member name="dependentCherrycakeUiComponents" type="array" default="" visibility="protected" static="false" line="62">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeUiComponents Cherrycake UiComponent names that are required by this module" type="array"/>
    </docblock>
  </member>
  <method name="addCssAndJavascript" start="72" end="77" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="AddCssAndJavascriptSetsToHtmlDocument">Adds the Css and Javascript sets that are required to load by HtmlDocument module for this UI component to properly work</description>
    </docblock>
  </method>
  <method name="buildContent" start="105" end="121" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="buildContent">Builds a proper HTML content string for the tooltip based on the different items given in $contents</description>
      <param description="An array of contents where each item has the following syntax. If a string is given, just the string is returned" type="array" variable="$contents">&lt;item name&gt; = [
     "order" =&gt; &lt;The order of the option in relation to other options&gt;
     "type" =&gt; &lt;One of the available UICOMPONENTTOOLTIP_CONTENT_ITEM_TYPE_* consts&gt;
     "setup" =&gt; [
         // For UICOMPONENTTOOLTIP_CONTENT_ITEM_TYPE_SIMPLE:
         "title" =&gt; &lt;The title of the option&gt;
         "iconName" =&gt; &lt;The optional icon name of the option&gt;
         "iconVariant" =&gt; &lt;The optional icon variant of the option&gt;
         "onHoverIconVariant" =&gt; &lt;The icon variant to apply on hovering the item, overrides iconVariant&gt;
         "nonHoverIconVariant" =&gt; &lt;The icon variant to apply when not hovering the item, overrides iconVariant&gt;
         "href" =&gt; &lt;The URL where this option should link on click&gt;
         "onClick" =&gt; &lt;Javascript code to execute on click, overrides "href"&gt;

         // Common for all types
         "style" =&gt; &lt;Any optional additional css styles&gt;
     ]
 ]</param>
      <return description="The proper HTML contents for the tooltip" type="string"/>
    </docblock>
    <parameter name="contents" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Order the options" line="109"/>
    </inline>
  </method>
  <method name="buildContentItem" start="132" end="184" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="buildContentItem">Intended to be used by the buildContent method, builds the HTML for a single item for the tooltip's contents</description>
      <param description="One of the available UICOMPONENTTOOLTIP_CONTENT_ITEM_TYPE_* consts" type="integer" variable="$type"/>
      <param description="setup options for the item, as specified in buildContent" variable="$setup" type="object">
        <type full="Cherrycake\The" namespace="Cherrycake" name="The"/>
      </param>
      <return description="The HTML for the given item" type="string"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="setup" byreference="false" type="{unknown}"/>
  </method>
  <parent full="Cherrycake\UiComponent" namespace="Cherrycake" name="UiComponent">
    <extends full="Cherrycake\BasicObject" namespace="Cherrycake" name="BasicObject"/>
    <member name="dependentCherrycakeUiComponents" visibility="protected" static="false" line="23">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeUiComponents Cherrycake UiComponent names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppUiComponents" visibility="protected" static="false" line="28">
      <docblock>
        <description/>
        <var description="$dependentAppUiComponents App UiComponent names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="33">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this UiComponent has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="38">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this UiComponent" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="45" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this UiComponent, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the ui component configuration</description>
        <param description="An array of configuration options for this ui component. It merges them with the hard coded default values configured in the overloaded ui component class." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="init" start="80" end="96" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the UiComponent, intended to be overloaded.
Called when the UiComponent is loaded.
Contains any specific initializations for the UiComponent, and any required loading of dependencies.</description>
        <return description="Whether the UiComponent has been loaded ok" type="boolean"/>
      </docblock>
      <inline>
        <comment value="Default configuration" line="86"/>
      </inline>
    </method>
    <method name="loadDependencies" start="105" end="121" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent UiComponents required by this one</description>
        <return description="Whether the dependent UiComponents are loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="getConfig" start="130" end="133" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="AddCssAndJavascriptSetsToHtmlDocument" start="140" end="150" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="AddCssAndJavascriptSetsToHtmlDocument">Adds the Css and Javascript sets that are required to load by HtmlDocument module for this UI component to properly work</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="158" end="172" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the required Css/Javascript files/code for this Ui component. Intended to be overloaded by an specific UiComponent class, which has to call first parent::addCssAndJavascript in order to retain UiComponent modules dependencies, and load Javascript/Css in the intended order
Called when the Css is dumped</description>
      </docblock>
    </method>
    <method name="__toString" start="174" end="176" abstract="false" final="false" static="false" visibility="public"/>
  </parent>
  <parent full="Cherrycake\BasicObject" namespace="Cherrycake" name="BasicObject">
    <method name="build" start="22" end="25" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Creates an object and returns it"/>
        <param description="A hash array with the select specs" type="array" variable="$setup"/>
        <return description="The object" type="object">
          <type full="Cherrycake\BasicObject" namespace="Cherrycake" name="BasicObject"/>
        </return>
      </docblock>
      <parameter name="properties" byreference="false" type="boolean" default="false"/>
    </method>
    <constructor name="__construct" start="30" end="32" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param description="A hash array with the setup keys" type="array" variable="$properties"/>
      </docblock>
      <parameter name="properties" byreference="false" type="boolean" default="false"/>
    </constructor>
    <method name="setProperties" start="39" end="45" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Bulk sets the given properties for this object"/>
        <param description="A hash array of properties" type="array" variable="$properties"/>
        <param description="Whether to overwrite properties if already set" type="boolean" variable="$isOverwrite"/>
      </docblock>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="isOverwrite" byreference="false" type="boolean" default="true"/>
    </method>
    <method name="treatParameters" start="52" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Provides a system to pass complex parameters to a method, where parameters are passed in a hash array instead of the usual parameters passing method. A method using this system should accept a hash array of parameters and pass them as the first parameter to this method via a parent::treatParameters call, specifying as a second parameter a setup hash array of options for each parameter to be treated in a special way."/>
        <param description="&amp;$parameters The hash array of received parameters" type="array"/>
        <param description="A hash array of setup options on how to treat each passed parameter" type="array" variable="$setup"/>
      </docblock>
      <parameter name="parameters" byreference="true" type="{unknown}"/>
      <parameter name="setup" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
