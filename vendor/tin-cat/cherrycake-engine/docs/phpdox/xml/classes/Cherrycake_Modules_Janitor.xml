<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Modules\Janitor" namespace="Cherrycake\Modules" name="Janitor" abstract="false" final="false" start="54" end="533">
  <file path="/var/www/lib/cherrycake/modules/Janitor" file="Janitor.class.php" realpath="/var/www/lib/cherrycake/modules/Janitor/Janitor.class.php" size="16147" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="1eddab16eea3bf49e78e95fad057117bfd23cc3c" relative="modules/Janitor/Janitor.class.php"/>
  <docblock>
    <description compact="Janitor">Executes maintenance tasks and checks.

It adds two actions:
 /janitor/run
     Runs all the tasks that must be run at the time of request.
     Needs the "key" GET parameter.
     Can receive the "task" GET parameter with the name of a task to be individually executed. It considers all configured tasks if not specified.

 /janitor/status
     Presents a page with a tasks report status
     Needs the "key" GET parameter.

Configuration example for css.config.php:
&lt;code&gt;
$janitorConfig = [
	"key" =&gt; false, // The key string needed to run janitor tasks and to access the status page. Must be overloaded by janitor.config.php
 "logDatabaseProviderName" =&gt; "main", // The name of the DatabaseProvider to use for storing Janitor log
 "logTableName" =&gt; "cherrycake_janitor_log", // The name of the table used to store Janitor log
 "cherrycakeJanitorTasks" =&gt; [ // An array of names of Cherrycake JanitorTask classes to be run
 ],
 "appJanitorTasks" =&gt; [ // An array of names of App JanitorTask classes to be run
 ]
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Modules"/>
  </docblock>
  <extends full="Cherrycake\Module" namespace="Cherrycake" name="Module"/>
  <member name="config" type="array" default="" visibility="protected" static="false" line="59">
    <docblock>
      <description/>
      <var description="$config Holds the default configuration for this module" type="array"/>
    </docblock>
  </member>
  <member name="dependentCherrycakeModules" type="array" default="" visibility="public" static="false" line="67">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
    </docblock>
  </member>
  <member name="janitorTasks" visibility="public" static="false" line="75">
    <docblock>
      <description compact="var @array $janitorTasks The array of JanitorTask objects that have been added to Janitor"/>
    </docblock>
  </member>
  <method name="init" start="84" end="91" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="init">Initializes the module and loads the Ui components</description>
      <return description="Whether the module has been initted ok" type="boolean"/>
    </docblock>
  </method>
  <method name="mapActions" start="98" end="168" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="mapActions">MAps the Actions to which this module must respond</description>
    </docblock>
  </method>
  <method name="loadTasks" start="175" end="190" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="loadTasks">Loads the configured tasks</description>
    </docblock>
    <inline>
      <comment value="Sets up Janitor tasks" line="182"/>
    </inline>
  </method>
  <method name="addCherrycakeJanitorTask" start="199" end="207" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="addCherrycakeJanitorTask">Adds a Cherrycake Janitor task</description>
      <param description="The name of the class of the Cherrycake Janitor task to add" type="string" variable="$janitorTaskName"/>
    </docblock>
    <parameter name="janitorTaskName" byreference="false" type="{unknown}"/>
  </method>
  <method name="addAppJanitorTask" start="216" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="addAppJanitorTask">Adds an App Janitor task</description>
      <param description="The name of the class of the App Janitor task to add" type="string" variable="$janitorTaskName"/>
    </docblock>
    <parameter name="janitorTaskName" byreference="false" type="{unknown}"/>
  </method>
  <method name="isTask" start="231" end="234" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the task with the given task name exists"/>
      <param description="The task name" type="string" variable="$janitorTaskName"/>
      <return description="True if a task with the specified name exists, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="janitorTaskName" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkKey" start="244" end="251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="checkKey">Checks if the given key allows access to Janitor</description>
      <param description="The key to check" type="string" variable="$key"/>
      <return description="Whether the key is correct or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="run" start="258" end="368" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="run">Runs Janitor to determine which tasks need to be executed now, and executes them.</description>
    </docblock>
    <parameter name="request" byreference="false" type="{unknown}"/>
  </method>
  <method name="status" start="375" end="379" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="status">Presents a page with Janitor's current status</description>
    </docblock>
    <parameter name="request" byreference="false" type="{unknown}"/>
  </method>
  <method name="getStatus" start="388" end="394" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getStatus">Returns an array containing status info for all Janitor tasks</description>
      <return description="An (n-dimensional hash array containing status info for janitor tasks" type="array"/>
    </docblock>
  </method>
  <method name="getJanitorTaskReturnCodeDescription" start="401" end="419" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the description of the given JanitorTask return code"/>
      <param description="The return code to get the description of" type="integer" variable="$returnCode"/>
    </docblock>
    <parameter name="returnCode" byreference="false" type="{unknown}"/>
  </method>
  <method name="getStatusHtml" start="430" end="481" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getStatusHtml">Returns the status for all Janitor tasks in a formated HTML string</description>
      <setup value="array $setup Setup options, available keys:">- tableClass: The CSS class to use for the table</setup>
      <return description="The HTML" type="string"/>
    </docblock>
    <parameter name="setup" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getLogHtml" start="493" end="515" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the log in HTML format This method expects that the engine has been loaded with the following modules: * Database * Ui * UiComponentTable"/>
      <param description="Setup parameters" type="array" variable="$setup"/>
      <return description="The HTML" type="string"/>
    </docblock>
    <parameter name="setup" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getDebugInfoHtml" start="524" end="532" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets debug information in HTML format"/>
      <setup value="array $setup Setup options, available keys:">- tableClass: The CSS class to use for the table</setup>
      <return description="Debug info for all configured tasks in HTML format" type="string"/>
    </docblock>
    <parameter name="setup" byreference="false" type="boolean" default="false"/>
  </method>
  <parent full="Cherrycake\Module" namespace="Cherrycake" name="Module">
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="24">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="29">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentCherrycakeModules" visibility="protected" static="false" line="34">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppModules" visibility="protected" static="false" line="39">
      <docblock>
        <description/>
        <var description="$dependentAppModules App module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="46" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this module, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the module configuration</description>
        <param description="An array of configuration options for this module. It merges them with the hard coded default values configured in the overloaded module." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="79" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
        <return description="The value of the specified config key. Returns false if doesn't exists." type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setConfig" start="94" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="setConfig">Sets a configuration value</description>
        <param description="The configuration key, or a hash array of keys =&gt; values if multiple keys are to be changed" type="string" variable="$key"/>
        <param description="The configuration value" type="string" variable="$value"/>
      </docblock>
      <parameter name="keyOrKeys" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="loadDependencies" start="110" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent modules required by this one</description>
        <return description="Whether the dependent modules were loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="mapActions" start="131" end="132" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="mapActions">Maps the Actions to which this module must respond. Should be overloaded by a module class when needed. Intended to contain calls to self::mapAction()</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="139" end="140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the Css/Javascript files/code needed by this module to the proper set on Css and Javascript modules.</description>
      </docblock>
    </method>
    <method name="init" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the module, intended to be overloaded.
Called when the module is loaded.
Contains any specific initializations for the module, and any required loading of modules and classes dependencies.</description>
        <return description="Whether the module has been loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="arrayMergeRecursiveDistinct" start="172" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="arrayMergeRecursiveDistinct">Joins two arrays like PHP function array_merge_recursive_distinct does, but instead it does not adds elements to arrays when keys match: it replaces them.</description>
        <author value="Daniel &lt;daniel (at) danielsmedegaardbuus (dot) dk&gt;"/>
        <author value="Gabriel Sobrinho &lt;gabriel (dot) sobrinho (at) gmail (dot) com&gt;"/>
        <param description="The first array to merge" type="array" variable="$array1"/>
        <param description="The second array to merge" type="array" variable="$array2"/>
        <return description="The merged array" type="array"/>
      </docblock>
      <parameter name="array1" byreference="true" type="array"/>
      <parameter name="array2" byreference="true" type="array"/>
    </method>
  </parent>
</class>
