<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Modules\Actions" namespace="Cherrycake\Modules" name="Actions" abstract="false" final="false" start="32" end="251">
  <file path="/var/www/lib/cherrycake/modules/Actions" file="Actions.class.php" realpath="/var/www/lib/cherrycake/modules/Actions/Actions.class.php" size="7319" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="d7890b2b1defcaf2ac76573cf646e86e4f245f5a" relative="modules/Actions/Actions.class.php"/>
  <docblock>
    <description compact="Actions">Module to manage the queries to the engine. It answers to queries by evaluating the query path and finding a matching mapped Action. Methods running via mapped actions must return false if they don't accept the request in order to let other methods in other mapped actions have a chance of accepting it. They must return true or nothing if they accept the request.
It takes configuration from the App-layer configuration file.

Configuration example for actions.config.php:
&lt;code&gt;
$actionsConfig = [
	"actionableModules" =&gt; [ // The actionable modules, modules that are allowed to be requested via an http query to the engine. A hash array in the form of &lt;primaryAction&gt; =&gt; &lt;module name&gt;
		ACTION_DEFAULT =&gt; "Home"
	],
	"cache" =&gt; [
		"provider" =&gt; "huge" // The default cache provider to use
	]
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Modules"/>
  </docblock>
  <extends full="Cherrycake\Module" namespace="Cherrycake" name="Module"/>
  <member name="config" type="array" default="" visibility="public" static="false" line="36">
    <docblock>
      <description/>
      <var description="$config Default configuration options" type="array"/>
    </docblock>
  </member>
  <member name="dependentCherrycakeModules" type="array" default="" visibility="public" static="false" line="43">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
    </docblock>
  </member>
  <member name="request" visibility="public" static="false" line="52">
    <docblock>
      <description/>
      <var description="$request Holds the current request" type="object">
        <type full="Cherrycake\Modules\Request" namespace="Cherrycake\Modules" name="Request"/>
      </var>
    </docblock>
  </member>
  <member name="actions" visibility="public" static="false" line="57">
    <docblock>
      <description/>
      <var description="$actions An array of Actions to be handled by this module" type="array"/>
    </docblock>
  </member>
  <member name="currentRequestPathComponentStrings" type="boolean" default="false" visibility="public" static="false" line="62">
    <docblock>
      <description/>
      <var description="$currentRequestPathComponentStrings An array of strings representing the path of the currently made request, built when Actions::buildCurrentRequestPathComponentStrings" type="array"/>
    </docblock>
  </member>
  <member name="currentAction" visibility="public" static="false" line="67">
    <docblock>
      <description/>
      <var description="$currentAction The current Action being executed" type="object">
        <type full="Cherrycake\Modules\Action" namespace="Cherrycake\Modules" name="Action"/>
      </var>
    </docblock>
  </member>
  <method name="init" start="76" end="103" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="init">Initializes the module</description>
      <return description="Whether the module has been initted ok" type="boolean"/>
    </docblock>
  </method>
  <method name="mapAction" start="113" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="mapAction">Maps an action for a module (either an App or a Cherrycake module)</description>
      <param description="The action name" variable="$actionName" type="string"/>
      <param description="object" variable="$action" type="object">
        <type full="Cherrycake\Modules\Action" namespace="Cherrycake\Modules" name="Action"/>
      </param>
    </docblock>
    <parameter name="actionName" byreference="false" type="{unknown}"/>
    <parameter name="action" byreference="false" type="{unknown}"/>
  </method>
  <method name="isAction" start="125" end="130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isAction">Checks if an action with the given actionName has been set</description>
      <param description="The action name" variable="$actionName" type="string"/>
      <return description="True if the action exists, false if doesnt's." type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="actionName" byreference="false" type="{unknown}"/>
  </method>
  <method name="getAction" start="138" end="143" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getAction"/>
      <param description="The action name" variable="$actionName" type="string"/>
      <return description="The requested action. False if doesn't exists." type="object">
        <type full="Cherrycake\Modules\Action" namespace="Cherrycake\Modules" name="Action"/>
      </return>
    </docblock>
    <parameter name="actionName" byreference="false" type="{unknown}"/>
  </method>
  <method name="run" start="152" end="183" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="run">Parses the received query to find the corresponding action and runs it</description>
      <return description="Returns false if an error occurred when executing the action or if the requested action is not coded and ACTION_NOT_FOUND has not been mapped." type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <inline>
      <comment value="Check the currentRequestPath against all mapped actions" line="155"/>
    </inline>
  </method>
  <method name="buildCurrentRequestPathComponentStrings" start="190" end="208" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="buildCurrentRequestPathComponentStrings">Builds the $currentRequestPathComponentStrings array, to be used lately by Request::isCurrentRequest</description>
    </docblock>
    <inline>
      <comment value="Clean and get the current request path into an array" line="191"/>
      <comment value="Strip get parameters" line="194"/>
      <comment value="Strip first slash if present" line="198"/>
      <comment value="Strip last slash if present" line="202"/>
    </inline>
  </method>
  <method name="notFound" start="215" end="218" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="notFound">Reacts to an error to a not found action</description>
    </docblock>
  </method>
  <method name="debug" start="225" end="249" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="debug"/>
      <return description="Debug information about the configured actions" type="string"/>
    </docblock>
  </method>
  <parent full="Cherrycake\Module" namespace="Cherrycake" name="Module">
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="24">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="29">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentCherrycakeModules" visibility="protected" static="false" line="34">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppModules" visibility="protected" static="false" line="39">
      <docblock>
        <description/>
        <var description="$dependentAppModules App module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="46" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this module, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the module configuration</description>
        <param description="An array of configuration options for this module. It merges them with the hard coded default values configured in the overloaded module." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="79" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
        <return description="The value of the specified config key. Returns false if doesn't exists." type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setConfig" start="94" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="setConfig">Sets a configuration value</description>
        <param description="The configuration key, or a hash array of keys =&gt; values if multiple keys are to be changed" type="string" variable="$key"/>
        <param description="The configuration value" type="string" variable="$value"/>
      </docblock>
      <parameter name="keyOrKeys" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="loadDependencies" start="110" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent modules required by this one</description>
        <return description="Whether the dependent modules were loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="mapActions" start="131" end="132" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="mapActions">Maps the Actions to which this module must respond. Should be overloaded by a module class when needed. Intended to contain calls to self::mapAction()</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="139" end="140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the Css/Javascript files/code needed by this module to the proper set on Css and Javascript modules.</description>
      </docblock>
    </method>
    <method name="init" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the module, intended to be overloaded.
Called when the module is loaded.
Contains any specific initializations for the module, and any required loading of modules and classes dependencies.</description>
        <return description="Whether the module has been loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="arrayMergeRecursiveDistinct" start="172" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="arrayMergeRecursiveDistinct">Joins two arrays like PHP function array_merge_recursive_distinct does, but instead it does not adds elements to arrays when keys match: it replaces them.</description>
        <author value="Daniel &lt;daniel (at) danielsmedegaardbuus (dot) dk&gt;"/>
        <author value="Gabriel Sobrinho &lt;gabriel (dot) sobrinho (at) gmail (dot) com&gt;"/>
        <param description="The first array to merge" type="array" variable="$array1"/>
        <param description="The second array to merge" type="array" variable="$array2"/>
        <return description="The merged array" type="array"/>
      </docblock>
      <parameter name="array1" byreference="true" type="array"/>
      <parameter name="array2" byreference="true" type="array"/>
    </method>
  </parent>
</class>
