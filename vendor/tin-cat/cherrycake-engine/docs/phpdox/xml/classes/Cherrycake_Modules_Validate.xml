<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Modules\Validate" namespace="Cherrycake\Modules" name="Validate" abstract="false" final="false" start="45" end="275">
  <file path="/var/www/lib/cherrycake/modules/Validate" file="Validate.class.php" realpath="/var/www/lib/cherrycake/modules/Validate/Validate.class.php" size="9819" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="bb0a95a3638b40ad4c7458fd82f31889138ee671" relative="modules/Validate/Validate.class.php"/>
  <docblock>
    <description compact="Module that validates many kinds of data">Configuration example for security.config.php:
&lt;code&gt;
$validateConfig = [
	"emailValidationMethod" =&gt; VALIDATE_EMAIL_METHOD_SIMPLE, // The method to use by default to validate emails, one of the available VALIDATE_EMAIL_METHOD_
	"emailValidationMailgunConfig" =&gt; [ // Configuration data for the Mailgun email validation method
		"endpoint" =&gt; "https://api.mailgun.net/v3/address/validate",
		"publicKey" =&gt; ""
	],
	"emailValidationMailboxLayerConfig" =&gt; [ // Configuration data for the Mailbox Layer email validation method
		"endpoint" =&gt; "http://apilayer.net/api/check",
		"apiKey" =&gt; ""
 ],
 "passwordStrengthValidationMinChars" =&gt; 8, // For password strength validation, minimum number of characters. Set to false to not check.
 "passwordStrengthValidationIsAtLeastOneNumber" =&gt; true, // For password strength validation, whether at least one number is required
 "passwordStrengthValidationIsAtLeastOneLetter" =&gt; true, // For password strength validation, whether at least one letter is required
 "passwordStrengthValidationIsRequireUppercaseAndLowercase" =&gt; true, // For password strength validation, whether to require at least one uppercase letter and a lowercase letter
 "passwordStrengthValidationIsRequireNotEqualToLogin" =&gt; true // For password strength validation, whether to require the password to be different than the login
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Modules"/>
  </docblock>
  <extends full="Cherrycake\Module" namespace="Cherrycake" name="Module"/>
  <member name="dependentCherrycakeModules" type="array" default="" visibility="public" static="false" line="49">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
    </docblock>
  </member>
  <member name="isConfigFile" type="boolean" default="true" visibility="protected" static="false" line="56">
    <docblock>
      <description/>
      <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="config" type="array" default="" visibility="public" static="false" line="61">
    <docblock>
      <description/>
      <var description="$config Default configuration options" type="array"/>
    </docblock>
  </member>
  <method name="email" start="85" end="109" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validates the given email address"/>
      <param description="The email address to validate" type="string" variable="$email"/>
      <param description="If specified, this email validation method will be used instead of the configured one. One of the available VALIDATE_EMAIL_METHOD_" type="boolean" variable="$forceMethod"/>
      <param description="Whether to use the VALIDATE_EMAIL_METHOD_SIMPLE method if the configured or forced method is not available" type="boolean" variable="$isFallbackToSimpleMethod"/>
      <return description="A result array where the first element is a boolean indicating whether the operation has gone ok or not, and the second element is a hash array of additional information." type="array"/>
    </docblock>
    <parameter name="email" byreference="false" type="{unknown}"/>
    <parameter name="forceMethod" byreference="false" type="boolean" default="false"/>
    <parameter name="isFallbackToSimpleMethod" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="emailValidateWithMailgun" start="116" end="153" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validates an email using Mailgun"/>
      <param description="The email address to validate" type="string" variable="$email"/>
      <return description="An result array where the first element is a boolean indicating whether the operation has gone ok or not, and the second element is a hash array of additional information." type="array"/>
    </docblock>
    <parameter name="email" byreference="false" type="{unknown}"/>
  </method>
  <method name="emailValidateWithMailboxLayer" start="160" end="216" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validates an email using Mailbox Layer"/>
      <param description="The email address to validate" type="string" variable="$email"/>
      <return description="An result array where the first element is a boolean indicating whether the operation has gone ok or not, and the second element is a hash array of additional information." type="array"/>
    </docblock>
    <parameter name="email" byreference="false" type="{unknown}"/>
  </method>
  <method name="passwordStrength" start="224" end="273" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validates the strength of the given password"/>
      <param description="The password to validate" type="string" variable="$password"/>
      <param description="The login associated with this password, used for some validations" type="string" variable="$login"/>
      <return description="A result array where the first element is a boolean indicating whether the operation has gone ok or not, and the second element is a hash array of additional information." type="array"/>
    </docblock>
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="login" byreference="false" type="boolean" default="false"/>
  </method>
  <parent full="Cherrycake\Module" namespace="Cherrycake" name="Module">
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="24">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="29">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentCherrycakeModules" visibility="protected" static="false" line="34">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppModules" visibility="protected" static="false" line="39">
      <docblock>
        <description/>
        <var description="$dependentAppModules App module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="46" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this module, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the module configuration</description>
        <param description="An array of configuration options for this module. It merges them with the hard coded default values configured in the overloaded module." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="79" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
        <return description="The value of the specified config key. Returns false if doesn't exists." type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setConfig" start="94" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="setConfig">Sets a configuration value</description>
        <param description="The configuration key, or a hash array of keys =&gt; values if multiple keys are to be changed" type="string" variable="$key"/>
        <param description="The configuration value" type="string" variable="$value"/>
      </docblock>
      <parameter name="keyOrKeys" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="loadDependencies" start="110" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent modules required by this one</description>
        <return description="Whether the dependent modules were loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="mapActions" start="131" end="132" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="mapActions">Maps the Actions to which this module must respond. Should be overloaded by a module class when needed. Intended to contain calls to self::mapAction()</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="139" end="140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the Css/Javascript files/code needed by this module to the proper set on Css and Javascript modules.</description>
      </docblock>
    </method>
    <method name="init" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the module, intended to be overloaded.
Called when the module is loaded.
Contains any specific initializations for the module, and any required loading of modules and classes dependencies.</description>
        <return description="Whether the module has been loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="arrayMergeRecursiveDistinct" start="172" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="arrayMergeRecursiveDistinct">Joins two arrays like PHP function array_merge_recursive_distinct does, but instead it does not adds elements to arrays when keys match: it replaces them.</description>
        <author value="Daniel &lt;daniel (at) danielsmedegaardbuus (dot) dk&gt;"/>
        <author value="Gabriel Sobrinho &lt;gabriel (dot) sobrinho (at) gmail (dot) com&gt;"/>
        <param description="The first array to merge" type="array" variable="$array1"/>
        <param description="The second array to merge" type="array" variable="$array2"/>
        <return description="The merged array" type="array"/>
      </docblock>
      <parameter name="array1" byreference="true" type="array"/>
      <parameter name="array2" byreference="true" type="array"/>
    </method>
  </parent>
</class>
