<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Modules\Session" namespace="Cherrycake\Modules" name="Session" abstract="false" final="false" start="49" end="541">
  <file path="/var/www/lib/cherrycake/modules/Session" file="Session.class.php" realpath="/var/www/lib/cherrycake/modules/Session/Session.class.php" size="17784" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="1d4341052ab395b28be4f79c4f297a71ebf1fe9e" relative="modules/Session/Session.class.php"/>
  <docblock>
    <description compact="Session">Implements a base session management for the visitor.
It uses the DB table cherrycake_session to store sessions, but caches them on the provided CacheProvider
The session identifier is the "id" field on the table, being a 128 hexadecimal characters tinytext, primary key, giving a huge amount of possible session ids
Session ids are generated by MD5ing a randomly generated stringified number, effectively giving an almost unpredictable session id in order to avoid session hijacking.
Repeated session ids are _not_ checked because the probability of getting a collision is so low (1 out of 1 septillion) that it's preferrable to have that security bug instead to having to perform that additional check on each newly created session.
To maximize performance, sessions are not allowed to store frequently changing data, so sessions are almost always taken from cache and no database access is performed unless a data change is needed.
A data storage mechanism is provided to store basic information within each session.
The data is stored as a serialized array on the "data" field. When requesting an update of this data, the cache is flushed so it will generate an additional database hit on the next request.

Important note: The sessions table must be maintained often in order to remove old sessions. Otherwise, a point will be reached where all possible session ids are used, and the module will remove the oldest session from the database in order to make room for the new one, effectively generating stress on the database.
The JanitorTaskSession is required to be run in order to do this maintenance work, so be sure to add it to janitor.config.php

It takes configuration from the App-layer configuration file. See there to find available configuration options.

Configuration example for session.config.php:
&lt;code&gt;
$securityConfig = [
"cachePrefix" =&gt; "Session", // The cache prefix to use when storing sessions into cache
"sessionCacheProviderName" =&gt; "fast", // The name of the cache provider to use to store sessions and the counter of created sessions
"sessionCacheTtl" =&gt; \Cherrycake\Modules\CACHE_TTL_SHORT, // The TTL of cached sessions. Should be small because if a session is removed from the database and the user keeps accessing the site with that session, his session will be accepted because it's still in cache.
"sessionDatabaseProviderName" =&gt; "main", // The name of the DatabaseProvider to use for storing sessions
"sessionTableName" =&gt; "cherrycake_session", // The name of the table used to store sessions
"cookieName" =&gt; "cherrycake", // The name of the cookie. Recommended to be set at the config file level.
"cookiePath" =&gt; "/", // The path of the cookie. If set to "/", it will be available within the entire domain
"cookieDomain" =&gt; "", // Must be set at config-level to the domain on which the session cookie must function. Usually something like ".domain.com" to make it work for all subdomains
"cookieSecure" =&gt; false, // If set to true, the cookie will only be sent when a secure connection (SSL) is present
"cookieHttpOnly" =&gt; false, // If set to true, the cookie only will be sent when an HTTP request is made.
"sessionDuration" =&gt; false, // The duration of the session in seconds. If set to zero, the session will last until the browser is closed.
"isSessionRenew" =&gt; true, // When set to true, the duration of the session will be renewed to a new sessionDuration. If set to false, the cookie will expire after sessionDuration, no matter how many times the session is requested.
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Modules"/>
  </docblock>
  <extends full="Cherrycake\Module" namespace="Cherrycake" name="Module"/>
  <member name="config" type="array" default="" visibility="public" static="false" line="54">
    <docblock>
      <description/>
      <var description="$config Default configuration options" type="array"/>
    </docblock>
  </member>
  <member name="dependentCherrycakeModules" type="array" default="" visibility="public" static="false" line="69">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
    </docblock>
  </member>
  <member name="sessionId" visibility="private" static="false" line="78">
    <docblock>
      <description/>
      <var description="$sessionId Stores the current session Id" type="string"/>
    </docblock>
  </member>
  <member name="sessionData" visibility="private" static="false" line="83">
    <docblock>
      <description/>
      <var description="$sessionData Stores the session data as a hash array" type="array"/>
    </docblock>
  </member>
  <method name="init" start="92" end="117" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="init">Initializes the module and loads the base CacheProvider class</description>
      <return description="Whether the module has been initted ok" type="boolean"/>
    </docblock>
  </method>
  <method name="loadSessionCookie" start="126" end="132" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="loadSessionCookie">Finds the current session's cookie and loads $this-&gt;sessionId.</description>
      <return description="True if the session cookie could be retrieved, false if the session cookie does not exists (no session present)." type="boolean"/>
    </docblock>
  </method>
  <method name="isSession" start="139" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isSession"/>
      <return description="Whether a session is present and loaded or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getSessionId" start="150" end="152" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getSessionId">Returns the current session id</description>
      <return description="The current session id" type="string"/>
    </docblock>
  </method>
  <method name="newSession" start="161" end="204" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="newSession">Creates a new session, sends the session cookie and stores the session into the DB</description>
      <return description="Whether the session could be created or not" type="boolean"/>
    </docblock>
    <inline>
      <comment value="Create session in DB" line="166"/>
      <comment value="Send session cookie" line="197"/>
    </inline>
  </method>
  <method name="getClientIp" start="209" end="214" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="The client's IP" type="string"/>
    </docblock>
  </method>
  <method name="getClientBrowserString" start="221" end="223" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getClientBrowserString"/>
      <return description="The client's browserstring" type="string"/>
    </docblock>
  </method>
  <method name="sendSessionCookie" start="233" end="252" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="sendSessionCookie">Sends the cookie for the given session id to the client</description>
      <param description="The session id" type="string" variable="$sessionId"/>
      <return description="Whether the cookie could be sent or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="renewSessionCookie" start="262" end="264" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="renewSessionCookie">Resets the session cookie for the given session id expiration time</description>
      <param description="The session id" type="string" variable="$sessionId"/>
      <return description="Whether the cookie could be renewed or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeSessionCookie" start="273" end="292" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="removeSessionCookie">Removes the session cookie from the client</description>
      <return description="Whether the cookie could be removed or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="generateNewSessionId" start="302" end="327" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="generateNewSessionId">Generates a random session Id</description>
      <return description="A random new session id or false if it can't be generated" type="mixed"/>
    </docblock>
    <parameter name="attemptsCounter" byreference="false" type="integer" default="0"/>
    <inline>
      <comment value="Tries to find the randomized session id on the cache for added protection against (very) unprobable collisions." line="321"/>
      <comment value="It should be desirable to check for sessions on the DB instead of the cache, but given the extremely low probabilities of a collision, only sessions on cache are checked for improved perfomance" line="322"/>
    </inline>
  </method>
  <method name="getSessionCacheKey" start="335" end="340" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getSessionCacheKey"/>
      <param description="The session Id" type="string" variable="$sessionId"/>
      <return description="The cache key to use when accessing or storing the given session id to cache" type="string"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="isSessionExistsOnCache" start="348" end="352" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isSessionExistsOnCache"/>
      <param description="The session id to check for" type="string" variable="$sessionId"/>
      <return description="True if the session is on the cache, false if not" type="boolean"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadSessionData" start="362" end="394" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="loadSessionData">Loads the given session id stored data from the cache/database</description>
      <param description="The session id to load" type="string" variable="$sessionId"/>
      <return description="True if the data could be loaded, false if not (session never existed, or has been purged)" type="boolean"/>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="isSessionData" start="401" end="403" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether a session data has been set or not"/>
      <param description="The data key to check" type="string" variable="$key"/>
      <return description="True if is has been set, false if not." type="boolean"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="getSessionData" start="413" end="415" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getSessionData">Gets a data key from the loaded session data</description>
      <param description="The data key to retrieve" type="string" variable="$key"/>
      <return description="The requested value from session data" type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="setSessionData" start="426" end="466" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="setSessionData">Stores a value with the given key within the session</description>
      <param description="The key of the stored value" type="string" variable="$key"/>
      <param description="The value to store" type="mixed" variable="$value"/>
      <return description="Whether the value could be stored or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="__get" start="473" end="475" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Magic get method to return the an item in the session"/>
      <param description="The key of the data to get" type="string" variable="$key"/>
      <return description="The data. Null if data with the given key is not set." type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="__set" start="483" end="485" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Magic set method to set the item $key to the given $value in the session"/>
      <param description="The key of the data to set" type="string" variable="$key"/>
      <param description="The value" type="mixed" variable="$value"/>
      <return description="Whether the value could be stored or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="__isset" start="492" end="494" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Magic method to check if the item $key has been set in the session"/>
      <param description="The key of the data to check" type="string" variable="$key"/>
      <param description="True if the data exists, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeSessionData" start="504" end="506" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="removeSessionData">Removes the value with the given key from the session</description>
      <param description="The key of the stored value" type="string" variable="$key"/>
      <return description="Whether the value could be removed or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="resetSessionCache" start="516" end="520" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="resetSessionCache">Resets the cache for the session with the given id, effectively forcing a DB hit the next time the session is requested.</description>
      <param description="The session id" type="string" variable="$sessionId"/>
      <return description="Whether the session cache could be resetted or not" type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
    <parameter name="sessionId" byreference="false" type="{unknown}"/>
  </method>
  <method name="debug" start="527" end="539" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="debug"/>
      <return description="Debug info about the current session" type="string"/>
    </docblock>
  </method>
  <parent full="Cherrycake\Module" namespace="Cherrycake" name="Module">
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="24">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="29">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentCherrycakeModules" visibility="protected" static="false" line="34">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppModules" visibility="protected" static="false" line="39">
      <docblock>
        <description/>
        <var description="$dependentAppModules App module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="46" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this module, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the module configuration</description>
        <param description="An array of configuration options for this module. It merges them with the hard coded default values configured in the overloaded module." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="79" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
        <return description="The value of the specified config key. Returns false if doesn't exists." type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setConfig" start="94" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="setConfig">Sets a configuration value</description>
        <param description="The configuration key, or a hash array of keys =&gt; values if multiple keys are to be changed" type="string" variable="$key"/>
        <param description="The configuration value" type="string" variable="$value"/>
      </docblock>
      <parameter name="keyOrKeys" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="loadDependencies" start="110" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent modules required by this one</description>
        <return description="Whether the dependent modules were loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="mapActions" start="131" end="132" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="mapActions">Maps the Actions to which this module must respond. Should be overloaded by a module class when needed. Intended to contain calls to self::mapAction()</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="139" end="140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the Css/Javascript files/code needed by this module to the proper set on Css and Javascript modules.</description>
      </docblock>
    </method>
    <method name="init" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the module, intended to be overloaded.
Called when the module is loaded.
Contains any specific initializations for the module, and any required loading of modules and classes dependencies.</description>
        <return description="Whether the module has been loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="arrayMergeRecursiveDistinct" start="172" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="arrayMergeRecursiveDistinct">Joins two arrays like PHP function array_merge_recursive_distinct does, but instead it does not adds elements to arrays when keys match: it replaces them.</description>
        <author value="Daniel &lt;daniel (at) danielsmedegaardbuus (dot) dk&gt;"/>
        <author value="Gabriel Sobrinho &lt;gabriel (dot) sobrinho (at) gmail (dot) com&gt;"/>
        <param description="The first array to merge" type="array" variable="$array1"/>
        <param description="The second array to merge" type="array" variable="$array2"/>
        <return description="The merged array" type="array"/>
      </docblock>
      <parameter name="array1" byreference="true" type="array"/>
      <parameter name="array2" byreference="true" type="array"/>
    </method>
  </parent>
</class>
