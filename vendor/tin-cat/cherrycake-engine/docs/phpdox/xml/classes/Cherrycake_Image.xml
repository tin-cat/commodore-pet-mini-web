<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Image" namespace="Cherrycake" name="Image" abstract="false" final="false" start="48" end="533">
  <file path="/var/www/lib/cherrycake/classes" file="Image.class.php" realpath="/var/www/lib/cherrycake/classes/Image.class.php" size="17033" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="fb603c48036bb7f2179062026707d5fc0b4c65a6" relative="classes/Image.class.php"/>
  <docblock>
    <description compact="Image">Class that represents an image stored on the server.
It allows for images to be stored in multiple sizes.
Can create the multiple size images from a given file.
All image files are considered lowercase and transformed to if needed.
All jpg images are considered with the extension ".jpg", not ".jpeg".
Any resizing of animated gif images will result on losing the animation, use the "copy" resize method to preserve the original file

Example of a sizes configuration array:
&lt;code&gt;
$traceimageSizes = [
 "thumbnail" =&gt; [
     "imageResizeMethod" =&gt; "maximumWidthOrHeight",
     "width" =&gt; 100,
     "height" =&gt; 100,
     "imageFormat" =&gt; "jpg",
     "isProgressive" =&gt; true,
     "jpgCompression" =&gt; 75,
     "isHd" =&gt; true
 ],
 "small" =&gt; []
     "imageResizeMethod" =&gt; "maximumWidthOrHeight",
     "width" =&gt; 800,
     "height" =&gt; 800,
     "imageFormat" =&gt; "jpg",
     "isProgressive" =&gt; true,
     "jpgCompression" =&gt; 90,
     "isHd" =&gt; true
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Classes"/>
    <todo value="Implement forceWidthAndHeight on createSizeFilesFromFile method"/>
  </docblock>
  <member name="fileName" visibility="protected" static="false" line="52">
    <docblock>
      <description/>
      <var description="$fileName The fileName of the image (without extension)" type="string"/>
    </docblock>
  </member>
  <member name="fileDirectory" visibility="protected" static="false" line="57">
    <docblock>
      <description/>
      <var description="$fileDirectory The directory on the server where the image is stored, usually a relative path" type="string"/>
    </docblock>
  </member>
  <member name="fileDirectoryDeepness" type="boolean" default="false" visibility="protected" static="false" line="62">
    <docblock>
      <description/>
      <var description="$fileDirectoryDeepness The number of subdirectories on which the directory structure is built in order to prevent too many files in a single directory. Leave to false if no subdirectory structure is used." type="integer"/>
    </docblock>
  </member>
  <member name="sizes" visibility="protected" static="false" line="67">
    <docblock>
      <description/>
      <var description="$sizes The specification of available sizes for this Image, if any" type="array"/>
    </docblock>
  </member>
  <member name="imageFormatWhenNoSizes" visibility="protected" static="false" line="72">
    <docblock>
      <description/>
      <var description="$imageFormatWhenNoSizes If no $sizes specified, the image file format that will be used" type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="89" end="101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="__construct">Creates the image object filling the data by using one of the load methods provided

Setup keys:

* loadMethod: If specified, it loads the Item using the given method, available methods:
	- fromId: Loads the image from a disk folder structure based on the given id

When "fromId" method is used, additional keys are required, see them in the loadFromId method</description>
      <param description="Specifications on how to create the Image object" type="array" variable="$setup"/>
      <return description="Whether the Image could be initialized ok or not" type="boolean"/>
    </docblock>
    <parameter name="setup" byreference="false" type="boolean" default="false"/>
  </constructor>
  <method name="init" start="110" end="112" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="init">Initializes the Image object</description>
      <return description="Whether the Image could be initialized ok or not" type="boolean"/>
    </docblock>
  </method>
  <method name="loadFromId" start="122" end="129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="loadFromId">Loads the Image object from a disk folder structure based on the given id</description>
      <param description="The id to use" type="integer" variable="$id"/>
      <return description="True if success, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFileName" start="136" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="setFileName"/>
      <param description="The file name" type="string" variable="$fileName"/>
    </docblock>
    <parameter name="fileName" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFileDirectory" start="145" end="147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="setFileDirectory"/>
      <param description="The file directory" type="string" variable="$fileDirectory"/>
    </docblock>
    <parameter name="fileDirectory" byreference="false" type="{unknown}"/>
  </method>
  <method name="buildDeepSubdirectoryName" start="159" end="167" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="buildDeepSubdirectoryName">Builds a subdirectory structure based on the given id. This is usually used to avoid storing too many files in a single directory.
A depth of 3 is usually enough for any environment with huge amounts of files.</description>
      <param description="The id that will be used to build the structure, usually the same id as the name of the file to be stored, when the file is named after an id." type="mixed" variable="$id"/>
      <param description="The depth of the subdirectory tree" type="integer" variable="$depth"/>
      <return description="The subdirectory name, with a leading slash, or null if no deep subdirectory tree is being used" type="string"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="depth" byreference="false" type="integer" default="3"/>
  </method>
  <method name="getUrl" start="176" end="190" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getUrl"/>
      <param description="The size for which to obtain the image URL. Leave to false or do not specify if this image is not available on different sizes." type="string" variable="$sizeName"/>
      <param description="Whether to use the high density version of the image if available, or not. Defaults to false." type="boolean" variable="$isHd"/>
      <return description="The URL of the image file for the specified $sizeName" type="string"/>
    </docblock>
    <parameter name="sizeName" byreference="false" type="boolean" default="false"/>
    <parameter name="isHd" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getAbsoluteLocalPath" start="199" end="201" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getAbsoluteLocalPath"/>
      <param description="The size for which to obtain the image absolute local path. Leave to false or do not specify if this image is not available on different sizes." type="string" variable="$sizeName"/>
      <param description="Whether to use the high density version of the image if available, or not. Defaults to false." type="boolean" variable="$isHd"/>
      <return description="The path" type="string"/>
    </docblock>
    <parameter name="sizeName" byreference="false" type="boolean" default="false"/>
    <parameter name="isHd" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getWidth" start="210" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getWidth"/>
      <param description="If the image has sizes, the size for which to get the width for" type="string" variable="$sizeName"/>
      <param description="Whether to use the high density version of the image if available, or not. Defaults to false." type="boolean" variable="$isHd"/>
      <return description="The width of the image in pixels" type="integer"/>
    </docblock>
    <parameter name="sizeName" byreference="false" type="boolean" default="false"/>
    <parameter name="isHd" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getHeight" start="238" end="257" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getHeight"/>
      <param description="If the image has sizes, the size for which to get the height for" type="string" variable="$sizeName"/>
      <param description="Whether to use the high density version of the image if available, or not. Defaults to false." type="boolean" variable="$isHd"/>
      <return description="The height of the image in pixels" type="integer"/>
    </docblock>
    <parameter name="sizeName" byreference="false" type="boolean" default="false"/>
    <parameter name="isHd" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="isFileExists" start="267" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isFileExists">Checks if a file for this Image exists or not. Checks for both Hd and non-Hd version of the image, if Hd is configured for the given $sizeName.</description>
      <param description="Optional, if this Image has sizes, the size name file to check" type="string" variable="$sizeName"/>
      <return description="Whether the image file exists or not. If a $size is passed and this Image has sizes, the file checked is the one corresponding to that size" type="boolean"/>
    </docblock>
    <parameter name="sizeName" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="isFilesExists" start="279" end="293" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isFilesExists">Checks if all files for this Image exists or not. All files are checked if this image has sizes. Only the first size is checked if $isCheckOnlyFirstSize is true. If the image hasn't sizes, only the corresponding file is checked</description>
      <param description="Whether to check only the first size (if this image has sizes) for improved performance." type="boolean" variable="$isCheckOnlyFirstSize"/>
      <return description="Whether all the image files exist or not." type="boolean"/>
    </docblock>
    <parameter name="isCheckOnlyFirstSize" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="createSizeFilesFromFile" start="304" end="517" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="createSizeFilesFromFile">Creates the image files from the given $sourceFileName as specified by the setup sizes.
The object must be loaded with the proper configurations in order to work.</description>
      <param description="The source image file, must include any required path (absolute or relative) and extension" type="string" variable="$sourceFileName"/>
      <return description="True if all files creation has gone ok, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="sourceFileName" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Manually add Hd sizes to the sizes array by creating a $finalSizes array with all the sizes" line="369"/>
    </inline>
  </method>
  <method name="getDebugErrorVariables" start="526" end="532" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="getDebugErrorVariables">Returns an array suitable for the Errors::trigger method containing identificative and useful information about this Image for debugging

return array A hash array of variables</description>
    </docblock>
  </method>
</class>
