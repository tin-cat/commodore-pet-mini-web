<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Cherrycake\Modules\Login" namespace="Cherrycake\Modules" name="Login" abstract="false" final="false" start="40" end="226">
  <file path="/var/www/lib/cherrycake/modules/Login" file="Login.class.php" realpath="/var/www/lib/cherrycake/modules/Login/Login.class.php" size="6691" time="2018-09-09T09:36:04+00:00" unixtime="1536485764" sha1="5762b72a7c47c9f9a25911d518b799cb2aac8d7d" relative="modules/Login/Login.class.php"/>
  <docblock>
    <description compact="Login">Implements a login/logout mechanism based on the Session module.

It takes configuration from the App-layer configuration file. See there to find available configuration options.

Configuration example for login.config.php:
&lt;code&gt;
$loginConfig = [
 "userClassName" =&gt; "", // The name of the class that represents a user on the App. Must implement the \Cherrycake\LoginUser interface.
 "passwordAuthenticationMethod" =&gt; LOGIN_PASSWORD_ENCRYPTION_METHOD_PBKDF2, // One of the available consts for password authentication methods. LOGIN_PASSWORD_ENCRYPTION_METHOD_PBKDF2 by default
 "isLoadUserOnInit" =&gt; true, // Whether to check for a logged user and get it on this module's init sequence. Defaults to true.
 "sleepOnErrorSeconds" =&gt; 1 // Seconds to delay execution when wrong login specified, to make things difficult for bombing attacks
];
&lt;/code&gt;</description>
    <package value="Cherrycake"/>
    <category value="Modules"/>
  </docblock>
  <extends full="Cherrycake\Module" namespace="Cherrycake" name="Module"/>
  <member name="config" type="array" default="" visibility="public" static="false" line="45">
    <docblock>
      <description/>
      <var description="$config Default configuration options" type="array"/>
    </docblock>
  </member>
  <member name="dependentCherrycakeModules" type="array" default="" visibility="public" static="false" line="54">
    <docblock>
      <description/>
      <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
    </docblock>
  </member>
  <member name="user" type="boolean" default="false" visibility="public" static="false" line="64">
    <docblock>
      <description/>
      <var description="$user The user object that represents the logged user, object of class specified as &quot;userClassName&quot; in config, must implement the \Cherrycake\LoginUser interface" type="object">
        <type full="Cherrycake\Modules\User" namespace="Cherrycake\Modules" name="User"/>
      </var>
    </docblock>
  </member>
  <method name="init" start="73" end="85" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="init">Initializes the module and loads the base CacheProvider class</description>
      <return description="Whether the module has been initted ok" type="boolean"/>
    </docblock>
  </method>
  <method name="loadUser" start="94" end="114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="loadUser">If a user is logged, gets it and loads it into $this-&gt;user</description>
      <return description="Whether the user was successfully retrieved. False if there's no logged user, or if there's an error while retrieving it." type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="encryptPassword" start="124" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="encryptPassword">Encrypts the given password with the configured password encryption method</description>
      <param description="The password to encrypt" type="string" variable="$password"/>
      <return description="The encrypted string, or false if the password could not be encrypted" type="mixed"/>
    </docblock>
    <parameter name="password" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkPassword" start="144" end="153" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="checkPassword">Checks the given password against the given encrypted password with the configured encryption method</description>
      <param description="The plain password to check" type="string" variable="$passwordToCheck"/>
      <param description="The encrypted password to check against" type="string" variable="$encryptedPassword"/>
      <return description="True if password is correct, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="passwordToCheck" byreference="false" type="{unknown}"/>
    <parameter name="encryptedPassword" byreference="false" type="{unknown}"/>
  </method>
  <method name="isLogged" start="162" end="167" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="isLogged">Determines whether there is a logged user or not</description>
      <return description="True if there is a logged user, false otherwise." type="object">
        <type full="Cherrycake\Modules\bool" namespace="Cherrycake\Modules" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="doLogin" start="179" end="201" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="doLogin">Logs in the user with the given $stringField and $password.
Locates the user on the database and checks the given password against the stored one.</description>
      <param description="The string field that uniquely identifies the user on the database, the one used by the user to login. Usually, an email or a username." type="string" variable="$stringField"/>
      <param description="The password entered by the user to login." type="string" variable="$password"/>
      <return description="One of the LOGIN_RESULT_* consts" type="integer"/>
    </docblock>
    <parameter name="stringField" byreference="false" type="{unknown}"/>
    <parameter name="password" byreference="false" type="{unknown}"/>
  </method>
  <method name="doLogout" start="210" end="216" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="doLogout">Logs out the user</description>
      <return description="One of the LOGOUT_RESULT_* consts" type="integer"/>
    </docblock>
  </method>
  <method name="debug" start="223" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="debug"/>
      <return description="Debug info about the current login" type="string"/>
    </docblock>
  </method>
  <parent full="Cherrycake\Module" namespace="Cherrycake" name="Module">
    <member name="isConfigFile" type="boolean" default="false" visibility="protected" static="false" line="24">
      <docblock>
        <description/>
        <var description="$isConfig Sets whether this module has its own configuration file. Defaults to false." type="object">
          <type full="Cherrycake\bool" namespace="Cherrycake" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="config" visibility="protected" static="false" line="29">
      <docblock>
        <description/>
        <var description="$config Holds the default configuration for this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentCherrycakeModules" visibility="protected" static="false" line="34">
      <docblock>
        <description/>
        <var description="$dependentCherrycakeModules Cherrycake module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <member name="dependentAppModules" visibility="protected" static="false" line="39">
      <docblock>
        <description/>
        <var description="$dependentAppModules App module names that are required by this module" type="array"/>
      </docblock>
    </member>
    <method name="loadConfigFile" start="46" end="52" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadConfigFile">Loads the configuration file for this module, if there's one</description>
      </docblock>
    </method>
    <method name="config" start="61" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="config">Sets the module configuration</description>
        <param description="An array of configuration options for this module. It merges them with the hard coded default values configured in the overloaded module." type="array" variable="$config"/>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="79" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="getConfig">Gets a configuration value</description>
        <param description="The configuration key" type="string" variable="$key"/>
        <return description="The value of the specified config key. Returns false if doesn't exists." type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setConfig" start="94" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="setConfig">Sets a configuration value</description>
        <param description="The configuration key, or a hash array of keys =&gt; values if multiple keys are to be changed" type="string" variable="$key"/>
        <param description="The configuration value" type="string" variable="$value"/>
      </docblock>
      <parameter name="keyOrKeys" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="boolean" default="false"/>
    </method>
    <method name="loadDependencies" start="110" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="loadDependencies">Loads the dependent modules required by this one</description>
        <return description="Whether the dependent modules were loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="mapActions" start="131" end="132" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="mapActions">Maps the Actions to which this module must respond. Should be overloaded by a module class when needed. Intended to contain calls to self::mapAction()</description>
      </docblock>
    </method>
    <method name="addCssAndJavascript" start="139" end="140" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="addCssAndJavascript">Adds the Css/Javascript files/code needed by this module to the proper set on Css and Javascript modules.</description>
      </docblock>
    </method>
    <method name="init" start="151" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="init">Initializes the module, intended to be overloaded.
Called when the module is loaded.
Contains any specific initializations for the module, and any required loading of modules and classes dependencies.</description>
        <return description="Whether the module has been loaded ok" type="boolean"/>
      </docblock>
    </method>
    <method name="arrayMergeRecursiveDistinct" start="172" end="182" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="arrayMergeRecursiveDistinct">Joins two arrays like PHP function array_merge_recursive_distinct does, but instead it does not adds elements to arrays when keys match: it replaces them.</description>
        <author value="Daniel &lt;daniel (at) danielsmedegaardbuus (dot) dk&gt;"/>
        <author value="Gabriel Sobrinho &lt;gabriel (dot) sobrinho (at) gmail (dot) com&gt;"/>
        <param description="The first array to merge" type="array" variable="$array1"/>
        <param description="The second array to merge" type="array" variable="$array2"/>
        <return description="The merged array" type="array"/>
      </docblock>
      <parameter name="array1" byreference="true" type="array"/>
      <parameter name="array2" byreference="true" type="array"/>
    </method>
  </parent>
</class>
